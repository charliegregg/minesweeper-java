#title: CharlieGregg7.4
#gravity: 2
#ranker: longest-path
// author Charlie Gregg
// date 2023-09-22


[<start>] -> [Minesweeper]
[Minesweeper|
  [<start>] -> 
  [<table>properties|
    width|int||
    height|int||
    mineChance|double
  ] ->
  [main()|
  	[<start>] -> [<input>Difficulty (1-5):] -> [setDifficulty()] ->
    [<input>Play or AI (p/a):] -> p [player()]
    [Play or AI (p/a):] -> a [ai()]
  ] ->
  [setDifficulty()|
  	[<start>] -> [<state>width] ->
    [<state>height] -> [<state>mineCount]
  ]
  [main()] ->
  [player()|
  	[<start>] -> [<sender>new Sweeper()] ->
    [<choice>Game Running?] -> no [<usecase>Win or loss] -> [<end>end]
    [Game Running?] -> yes [<input>Move (x,yf):] ->
    [<choice>Has 'f'?] -> no [open()] -> [display()]
    [Has 'f'?] -> yes [toggleFlag()] -> [display()] ->
    [Game Running?]
  ] ->
  [open()|
  	[<start>] -> [<sender>Set] --> [<state>queue]
    [Set] -> [<choice>More spaces?] -> no [<end>end]
    [queue] --> [More spaces?]
    [More spaces?] -> yes [Sweeper.tryOpen()] ->
    [<choice>Tag] -> WIN [<end>WIN]
    [Tag] -> LOSE [<end>LOSE]
    [Tag] -> FLAG [<usecase>cell is flagged] ->
    [<choice> 0 Neighbours?] -> no [More spaces?]
    [Sweeper.getTouching()] -> [More spaces?]
    [Tag] -> NONE [0 Neighbours?] -> yes [Sweeper.getTouching()] -->
    [<state>queue]
  ]
  [player()] ->
  [toggleFlag()|
  	[<start>] -> [Sweeper.setFlag()]
  ]
  [player()] ->
  [display()|
  	[<start>] ->
  	[<choice>Done rows?] -> yes [<usecase>Show Board] -> [<end>end]
    [Done rows?] yes <-> no [<choice>Done columns?]
    [Done columns?] <-> no [<state>add tile;to display]
  ]
  [main()] ->
  [ai()|
  	[<start>] -> [<sender>new Sweeper()] ->[<sender>new MineBot()] ->
    [MineBot.run()] -> [display()] -> [<usecase>Win or loss] -> [<end>end]
  ]
] ->
[Sweeper|
  [<start>] ->
  [<table>properties|
    mines|boolean\[\]\[\]||
    open|boolean\[\]\[\]||
    flags|boolean\[\]\[\]||
    neighbours|int\[\]\[\]||
    filled|boolean||
    hitLocation|MineTile||
    width|int||
    height|int||
    mineCount|int||
    mineChance|double||
    seed|long||
    remainingSpaces|int
  ]
  [isMine()|
  	[<start>] -> [<choice>Is this a mine?] -> yes [<end>YES]
    [Is this a mine?] -> no [<end>NO]
  ]
  [isOpen()|
  	[<start>] -> [<choice>Is this open?] -> yes [<end>YES]
    [Is this open?] -> no [<end>NO]
  ]
  [isFlagged()|
  	[<start>] -> [<choice>Is this flagged?] -> yes [<end>YES]
    [Is this flagged?] -> no [<end>NO]
  ]
  [setMine()|
  	[<start>] -> [<choice>Is this a mine?] -> yes [<state>decrease neighbours] ->
    [<choice>Should this be a mine?] -> yes [<state>increase neighbours] ->
    [<state>Make mine] -> [<end>end]
    [Is this a mine?] no -> [Should this be a mine?] no -> [<state>Make not mine]
    [<end>end]
  ]
  [plantMines()|
  	[<start>] -> [<choice>Enough?] <-> no [<state>place a mine]
  	[Enough?] -> yes [<state>populated] -> [<end>end]
  ] -> [setMine()]
  [setOpen()|
  	[<start>] -> [<choice>isOpen()?] -> no [<state>Decrease remaining spaces] ->
    [<state>Make open] -> [<end>end] <- yes [isOpen()?]
  ] -> [isOpen()]
  [setFlag()|
  	[<start>] -> [<state>Set this flag] -> [<end>end]
  ]
  [getNeighbours()|
  	[<start>] -> [<state>Get neighbours] -> [<end>end]
  ]
  [addIf()|
  	[<start>] -> [<choice>Only closed?] -> no 
    [<state>Add space] -> [<end>end]
    [Only closed?] -> yes [<choice>isOpen()?] -> yes
    [<end>end] <- [<state>Add space] no <- [isOpen()?]
  ] -> [isOpen()]
  [getSurrounding()|
  	[<start>] -> [<state>Get all tiles within grid;which are one tile away] -> [<end>end]
  ] -> [addIf()]
  [getTouching()|
  	[<start>] -> [<state>getSurrounding();but only closed] -> [<end>end]
  ] -> [getSurrounding()]
  [tryOpen()|
  	[<start>] -> [<choice>Is populated?] -> no [plantMines()]
    [Is populated?] -> yes [<choice>isFlagged()?] -> yes
    [<state>Tag = FLAG] -> [<end>end]
    [plantMines()] -> [isFlagged()?]
    [isFlagged()?] -> no [<choice>isMine()?] -> yes
    [<state>Tag = LOSE] -> [<end>end]
    [isMine()?] -> no [setOpen()] -> [<state>Neighbours = ;getNeighbours()] ->
    [<choice>Has won?] -> yes
    [<state>Tag = WIN] -> [<end>end]
    [Has won?] -> no [<state>Tag = NONE] -> [<end>end]
  ] -> [plantMines()]
  [tryOpen()] -> [isFlagged()]
  [tryOpen()] -> [isMine()]
  [tryOpen()] -> [getNeighbours()]
  [getDisplay()|
  	[<start>] -> [<choice>isOpen()?] -> yes 
    [<state>getNeighbours()] -> [<end>end]
    [isOpen()?] -> no [<choice>Was hit?] -> yes
    [<state>X] -> [<end>end]
    [Was hit?] -> no [<choice>isFlagged()?] -> yes
    [<state>F] -> [<end>end]
    [isFlagged()?] -> no [<state>#] -> [<end>end]
  ] -> [isOpen()]
  [getDisplay()] -> [getNeighbours()]
  [getDisplay()] -> [isFlagged()]
  [Open|
  [<start>] ->
    [<table>properties|
      neighbours|int||
      tag|Tag
    ]
  	[Tag] - [WIN]
    [Tag] - [LOSE]
    [Tag] - [FLAG]
    [Tag] - [NONE]
  ]
] ->
[MineTile|
  [<start>] ->
  [<table>properties|
    x|int||
    y|int
  ]
]
[Minesweeper] -> [MineTile]
[Minefield|
  [<start>] ->
  [<table>properties|
    spaces|Set<MineTile>||
    mines|int
  ]
  [filled()|
  	[<start>] -> [<choice>Filled with mines?] -> yes [<end>YES]
    [Filled with mines?] -> no [<end>NO]
  ]
  [empty()|
  	[<start>] -> [<choice>No mines?] -> yes [<end>YES]
    [No mines?] -> no [<end>NO]
  ]
  [exists()|
  	[<start>] -> [<choice>Have at least one space?] -> yes [<end>YES]
    [Have at least one space?] -> no [<end>NO]
  ]
  [getSpaces()|
  	[<start>] -> [<state>spaces] -> [<end>end]
  ]
  [getSpaces()|
  	[<start>] -> [<state>mines/spaces] -> [<end>end]
  ]
  [intersect()|
  	[<start>] -> [<state>c = a & b] -> 
    [<state>low = \|c\| - min(\|a\| - a.mines, \|b\| - b.mines)] -> 
    [<state>high = min(a.mines, b.mines, \|c\|)] ->
    [<choice>low = high?] -> no [<end>end]
    [low = high?] -> yes [<table>replace a and b with|
    spaces | mines ||
    c^b | a.mines - low ||
    c   | low ||
    c^b | b.mines - low
    ] -> [<end>end]
  ]
  [filter()|
  	[<start>] -> [<choice>Done all spaces?] -> yes [<end>end]
    [Done all spaces?] yes <-> no [<choice>Keep it?] -> no
    [<state>remove space] -> [Done all spaces?]
  ]
  [touches()|
  	[<start>] -> [<choice>Space in common?] -> no [<end>NO]
    [Space in common?] -> yes [<end>YES]
  ]
] -> [MineTile]
[MineBot|
  [<start>] ->
  [<table>properties|
    board|Sweeper||
    fields|Set<Minefield>||
    state|int
  ]
  [open()|
  	[<start>] -> [Sweeper.tryOpen()] ->
    [<choice>Tag] -> LOSE [<end>LOSE]
    [Tag] -> WIN [<end>WIN]
    [Tag] -> NONE or FLAG [<state>add Sweeper.getTouching()
    to fields with Open.neighbours() mines] -> 
    [<end>end]
  ]
  [openBest()|
  	[<start>] -> [<choice>Done all fields?] -> yes
  	[<state>pick random from field] -> [open()] ->
    [<end>end]
    [Done all fields?] no <-> no [<choice>getChance() better?] -> yes
    [<state>keep this field now] -> [Done all fields?]
  ] -> [open()]
  [expand()|
  	[<start>] -> [<state>remove fields over open spaces] ->
    [<state>find all touching fields;with Minefield.touches()] --> [<state>queue]
    [find all touching fields] -> [<choice>More to check?] <-- [<state>queue]
    [More to check?] -> yes [Minefield.intersect()] -> [<choice>Reduced?] -> yes
    [<state>replace fields] -> [<state>update queue with;changes and effects] -->
    [<state>queue]
    [Reduced?] -> no [More to check?] -> no
    [<choice>More to open?] -> yes [<choice>Minefield.empty()?] -> yes
    [<state>open spaces] -> [<state>found = true] ->[More to open?]
    [Minefield.empty()?] -> no [<choice>Minefield.filled()?] -> yes
    [<state>flag spaces] -> [More to open?]
    [Minefield.filled()?] -> no [More to open?] -> no
    [<choice>All fields solved?] -> yes [<state>state = 1 (win)] ->
    [<end>end]
    [All fields solved?] no -> [<choice>found?] no ->
    [openBest()] -> [<end>end] <- yes [found?]
  ] -> [openBest()]
  [run()|
  	[<start>] -> [<choice>Game running?] -> yes
    [do something] -> [expand()] -> [Game running?] -> no
    [<choice>Won?] -> no [<end>NO]
    [Won?] -> yes [<end>YES]
  ] -> [expand()]
] -> [Sweeper]
[MineBot] -> [Minefield]
[MineBot] -> [MineTile]
[Minesweeper] -> [MineBot]